package emulator.io.display;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.util.Random;

import core.exception.HardwareException;
import core.memory.memory8.Memory8;
import core.memory.memory8.MemoryBusIIe;
import emulator.io.keyboard.KeyboardIIe;

public class DisplayIIe extends DisplayWindow {

	private Random rand = new Random();
	private int lastReadValue;
	
	private Frame frame;
	private Canvas32x32 canvas;
	private MemoryBusIIe memoryBus;
	private Memory8 memory;

	private int textMod;
	private boolean mixedMode;
	private DisplayType displayType;
	private DisplayType displayTypeTop;
	private DisplayType displayTypeBottom;
	private BufferedImage [] rawDisplay;

	private int xOff = (640-XSIZE)>>1;
	private int yOff = (480-YSIZE)>>1;

	private int bufferPage;
	private int paintPage;
	private int colorWord;  
	private int flashToggle = 0;
	private int offset40 = 0;
	private int colorWordSize;
	private int shiftBit;
	private int lastSwitchIteration;
	private int page;
	private int xPos;
	private int [] pal;
	private int palIndex;
	private int hueShift = -32;
	
	private static final int PAL_INDEX_COLOR = 0;
	private static final int PAL_INDEX_MONO = 48;
	private static final int PAL_INDEX_MONO_GREEN = 2*48;
	private static final int PAL_BRIGHTNESS = 160;
	private static final int OFFSET40 = 7;

	private static final int XSIZE = 567;
	private static final int YSIZE = 384;

	private static final byte[] TEXT_DISPLAY = {

		// Normal text

		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,
		
		// Flash text

		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,

		// Mouse text
		
		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x10, 0x08, 0x36, 0x7f, 0x3f, 0x3f, 0x7e, 0x36,
		0x10, 0x08, 0x36, 0x41, 0x21, 0x21, 0x4a, 0x36,
		0x00, 0x00, 0x02, 0x06, 0x0e, 0x1e, 0x36, 0x42,
		0x7f, 0x22, 0x14, 0x08, 0x08, 0x14, 0x2a, 0x7f,
		0x00, 0x40, 0x20, 0x11, 0x0a, 0x04, 0x04, 0x00,
		0x7f, 0x3f, 0x5f, 0x6c, 0x75, 0x7b, 0x7b, 0x7f,
		0x70, 0x60, 0x7e, 0x31, 0x79, 0x30, 0x3f, 0x02,
		0x00, 0x18, 0x07, 0x00, 0x07, 0x0c, 0x08, 0x70,
		0x08, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a,
		0x08, 0x08, 0x08, 0x08, 0x49, 0x2a, 0x1c, 0x08,
		0x08, 0x1c, 0x2a, 0x49, 0x08, 0x08, 0x08, 0x08,
		0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x40, 0x40, 0x44, 0x46, 0x7f, 0x06, 0x04,
		0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
		0x13, 0x18, 0x1c, 0x7e, 0x1c, 0x18, 0x10, 0x6f,
		0x64, 0x0c, 0x1c, 0x3f, 0x1c, 0x0c, 0x04, 0x7b,
		0x40, 0x48, 0x08, 0x7f, 0x3e, 0x1c, 0x48, 0x40,
		0x40, 0x48, 0x1c, 0x3e, 0x7f, 0x08, 0x48, 0x40,
		0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f,
		0x08, 0x10, 0x20, 0x7f, 0x20, 0x10, 0x08, 0x00,
		0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55,
		0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a,
		0x00, 0x3e, 0x41, 0x01, 0x01, 0x01, 0x7f, 0x00,
		0x00, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x7f, 0x00,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x08, 0x1c, 0x3e, 0x7f, 0x3e, 0x1c, 0x08, 0x00,
		0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x14, 0x14, 0x77, 0x00, 0x77, 0x14, 0x14, 0x00,
		0x7f, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x7f,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x7b, 0x77, 0x6f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x63, 0x5f, 0x43, 0x5d, 0x43, 0x7f,
		0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x7f, 0x7f, 0x43, 0x7d, 0x7d, 0x7d, 0x43, 0x7f,
		0x5f, 0x5f, 0x43, 0x5d, 0x5d, 0x5d, 0x43, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x41, 0x7d, 0x43, 0x7f,
		0x67, 0x5b, 0x7b, 0x61, 0x7b, 0x7b, 0x7b, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
		0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
		0x77, 0x7f, 0x73, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x6f, 0x7f, 0x67, 0x6f, 0x6f, 0x6f, 0x6d, 0x73,
		0x7d, 0x7d, 0x5d, 0x6d, 0x71, 0x6d, 0x5d, 0x7f,
		0x73, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x7f, 0x7f, 0x49, 0x55, 0x55, 0x55, 0x5d, 0x7f,
		0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d,
		0x7f, 0x7f, 0x43, 0x5d, 0x5d, 0x43, 0x5f, 0x5f,
		0x7f, 0x7f, 0x45, 0x79, 0x7d, 0x7d, 0x7d, 0x7f,
		0x7f, 0x7f, 0x43, 0x7d, 0x63, 0x5f, 0x61, 0x7f,
		0x7f, 0x7b, 0x61, 0x7b, 0x7b, 0x5b, 0x67, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x4d, 0x53, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x7f,
		0x7f, 0x7f, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
		0x7f, 0x7f, 0x41, 0x6f, 0x77, 0x7b, 0x41, 0x7f,
		0x47, 0x73, 0x73, 0x79, 0x73, 0x73, 0x47, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
		0x71, 0x67, 0x67, 0x4f, 0x67, 0x67, 0x71, 0x7f,
		0x53, 0x65, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x7f, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00

	};

	private static final int HGR_TO_DHGR[] = new int[] {
		0x0000,	0x0003,	0x000c,	0x000f,	0x0030,	0x0033,	0x003c,	0x003f,
		0x00c0,	0x00c3,	0x00cc,	0x00cf,	0x00f0,	0x00f3,	0x00fc,	0x00ff,
		0x0300,	0x0303,	0x030c,	0x030f,	0x0330,	0x0333,	0x033c,	0x033f,
		0x03c0,	0x03c3,	0x03cc,	0x03cf,	0x03f0,	0x03f3,	0x03fc,	0x03ff,
		0x0c00,	0x0c03,	0x0c0c,	0x0c0f,	0x0c30,	0x0c33,	0x0c3c,	0x0c3f,
		0x0cc0,	0x0cc3,	0x0ccc,	0x0ccf,	0x0cf0,	0x0cf3,	0x0cfc,	0x0cff,
		0x0f00,	0x0f03,	0x0f0c,	0x0f0f,	0x0f30,	0x0f33,	0x0f3c,	0x0f3f,
		0x0fc0,	0x0fc3,	0x0fcc,	0x0fcf,	0x0ff0,	0x0ff3,	0x0ffc,	0x0fff,
		0x3000,	0x3003,	0x300c,	0x300f,	0x3030,	0x3033,	0x303c,	0x303f,
		0x30c0,	0x30c3,	0x30cc,	0x30cf,	0x30f0,	0x30f3,	0x30fc,	0x30ff,
		0x3300,	0x3303,	0x330c,	0x330f,	0x3330,	0x3333,	0x333c,	0x333f,
		0x33c0,	0x33c3,	0x33cc,	0x33cf,	0x33f0,	0x33f3,	0x33fc,	0x33ff,
		0x3c00,	0x3c03,	0x3c0c,	0x3c0f,	0x3c30,	0x3c33,	0x3c3c,	0x3c3f,
		0x3cc0,	0x3cc3,	0x3ccc,	0x3ccf,	0x3cf0,	0x3cf3,	0x3cfc,	0x3cff,
		0x3f00,	0x3f03,	0x3f0c,	0x3f0f,	0x3f30,	0x3f33,	0x3f3c,	0x3f3f,
		0x3fc0,	0x3fc3,	0x3fcc,	0x3fcf,	0x3ff0,	0x3ff3,	0x3ffc,	0x3fff
	};
	
	private static final int GR_TO_DHGR[] = new int[] {
		0x0000, 0x0000,
		0x1111, 0x0444,
		0x2222, 0x0888,
		0x3333, 0x0ccc,
		0x0444, 0x1111,
		0x1555, 0x1555,
		0x2666, 0x1999,
		0x3777, 0x1ddd,
		0x0888, 0x2222,
		0x1999, 0x2666,
		0x2aaa, 0x2aaa,
		0x3bbb, 0x2eee,
		0x0ccc, 0x3333,
		0x1ddd, 0x3777,
		0x2eee, 0x3bbb,
		0x3fff, 0x3fff
	};

	private enum DisplayType {
		TEXT40,
		TEXT80,
		LORES40,
		LORES40M,
		LORES80,
		HIRES40,
		HIRES40M,
		HIRES80
	}
	
	public DisplayIIe(MemoryBusIIe memoryBus, KeyboardIIe keyboard, long unitsPerCycle) throws HardwareException {
		super(unitsPerCycle);
		this.memoryBus = memoryBus;
		this.memory = memoryBus.getMemory();
		coldRestart();
		canvas = new Canvas32x32();
		frame = new Frame("Ever2E");
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent windowEvent){
				System.exit(0);
			}
		});
		frame.add(canvas);
		canvas.setBackground(Color.BLACK);
		frame.setVisible(true);
		frame.setSize(XSIZE+(xOff<<1), YSIZE+(yOff<<1)+frame.getInsets().top);
		frame.addKeyListener(keyboard);
		canvas.repaint();
		canvas.addKeyListener(keyboard);
	}

	private class Canvas32x32 extends Canvas {
		
		private static final long serialVersionUID = 3277512952021171260L;
		
		public Canvas32x32() {
			super();
			setSize(XSIZE, YSIZE);
			evaluateSwitchChange();
		}

		public void paint( Graphics g ) {
			Dimension size = getSize();
			xOff = (size.width-XSIZE)>>1;
			yOff = (size.height-YSIZE)>>1;
			g.drawImage(rawDisplay[paintPage], xOff, yOff, this);
		}
	
	}
	
	private void evaluateSwitchChange() {
		
		if( memoryBus.isAltCharSet() )
			textMod = 2;
		else if( (flashToggle&0x10)!=0 )
			textMod = 1;
		else
			textMod = 0;

		if( memoryBus.is80Col() )
			displayTypeBottom = DisplayType.TEXT80;
		else
			displayTypeBottom = DisplayType.TEXT40;
				 
		if( !memoryBus.isText() && memoryBus.isHiRes() &&
				memoryBus.is80Col() && !memoryBus.isAn3() )
			displayTypeTop = DisplayType.HIRES80;
		else if( !memoryBus.isText() && memoryBus.isHiRes() )
			displayTypeTop = DisplayType.HIRES40;
		else if( !memoryBus.isText() )
			displayTypeTop = DisplayType.LORES40;
		else
			displayTypeTop = displayTypeBottom;

		mixedMode = memoryBus.isMixed();
		if( !mixedMode )
			displayType = displayTypeTop;
		else
/*				if( scanLine==0x0140 ) 
				displayType = displayTypeBottom;
			else if( scanLine==0x0000 )
				displayType = displayTypeTop;
*/
			displayType = displayTypeTop;
		
		if( displayType==DisplayType.HIRES80 ||
				displayType==DisplayType.LORES80 ||
				displayType==DisplayType.TEXT80 ) {
			colorWordSize -= offset40;
			offset40 = 0;
		}
		else {
			colorWordSize += OFFSET40 - offset40;
			offset40 = OFFSET40;
		}
		if( displayType==DisplayType.TEXT40 || displayType==DisplayType.TEXT80 )
			palIndex = PAL_INDEX_MONO;
		else
			palIndex = PAL_INDEX_COLOR;

		page = memoryBus.isPage2()&&!memoryBus.is80Store() ? 2:1;

	}
	
	@Override
	public void cycle() throws HardwareException {
		
		incSleepCycles(1);

		if( textMod<2 && (flashToggle^(++flashToggle)&0x10)!=0 )
			textMod |= (flashToggle&0x10)!=0 ? 1:0;

		int readRandX = Math.abs(rand.nextInt())%40;
		int readRandY = (Math.abs(rand.nextInt()%192))<<1;
		// TODO - cycles should be altered to sync with cpu
		for( int scanLine = 0; scanLine < 384; scanLine+=2 ) {

			int y = scanLine>>4;
			int yc = scanLine&0x0f;
			int gfxWord = 0;
			
			for( int x = 0; x < 40; x++ ) {
				
				int switchIteration = memoryBus.getSwitchIteration();
				if( lastSwitchIteration!=switchIteration ) {
					lastSwitchIteration = switchIteration;
					evaluateSwitchChange();
				}

				if( x==0 ) {
					
					xPos = 0;
					colorWord = 0;
					colorWordSize = offset40;
					shiftBit = 0;
					if( mixedMode ) {
						if( scanLine==0x0140 ) 
							displayType = displayTypeBottom;
						else if( scanLine==0x0000 ) {
							flipPage();
							cleanEdges();
							displayType = displayTypeTop;
						}
						if( displayType==DisplayType.HIRES80 ||
								displayType==DisplayType.LORES80 ||
								displayType==DisplayType.TEXT80 ) {
							colorWordSize -= offset40;
							offset40 = 0;
						}
						else {
							colorWordSize += OFFSET40 - offset40;
							offset40 = OFFSET40;
						}
					} else if( scanLine==0x0000 ) {
						flipPage();
						cleanEdges();
					}

				}
					
				int readValue = 0;
				switch( displayType ) {
				
				case HIRES40:
					readValue = memory.getByte(getAddressHi40(page, (y<<3)+(yc>>1), x));
					gfxWord = HGR_TO_DHGR[readValue&0x7f];
					if( (readValue&0x80)!=0 ) {
						gfxWord <<= 1;
						gfxWord |= shiftBit;
					}
					if( (gfxWord&0x2000)!=0 )
						shiftBit = 1;
					else
						shiftBit = 0;
					break;
					
				case HIRES40M:
					readValue = memory.getByte(getAddressHi40(page, (y<<3)+(yc>>1), x));
					gfxWord = HGR_TO_DHGR[readValue&0x7f];
					break;
					
				case HIRES80:
					int address = getAddressHi40(page, (y<<3)+(yc>>1), x);
					readValue = memory.getByte(0x10000|address);
					gfxWord = readValue;
					readValue = memory.getByte(address);
					gfxWord |= readValue<<7;
					break;
					
				case LORES40:
					readValue = memory.getByte(getAddressLo40(page, y, x));
					int plotValue;
					if( yc>=8 )
						plotValue = readValue>>4;
					else
						plotValue = readValue&0x0f;
					gfxWord = GR_TO_DHGR[(plotValue<<1)+((x&0x01)!=0?1:0)];
					break;
					
				case LORES40M:
					readValue = memory.getByte(getAddressLo40(page, y, x));
					if( yc>=8 )
						plotValue = readValue>>4;
					else
						plotValue = readValue&0x0f;
					gfxWord = HGR_TO_DHGR[0x7f&GR_TO_DHGR[(plotValue<<1)+((x&0x01)!=0?1:0)]];
					break;
					
				case LORES80:
					// TODO
					gfxWord = 0xaaaa;
					break;
					
				case TEXT40:
					readValue = memory.getByte(getAddressLo40(page, y, x));
					gfxWord = HGR_TO_DHGR[TEXT_DISPLAY[textMod*2048+(readValue*8+(yc>>1))]];
					break;
					
				case TEXT80:
					address = getAddressLo40(page, y, x);
					readValue = memory.getByte(0x10000|address);
					gfxWord = TEXT_DISPLAY[textMod*2048+(readValue*8+(yc>>1))];
					readValue = memory.getByte(address);
					gfxWord |= TEXT_DISPLAY[textMod*2048+(readValue*8+(yc>>1))]<<7;
					break;
					
				}
				if( scanLine==readRandY && x==readRandX )
					this.lastReadValue = readValue;
				
				int yPos = (y<<4)+yc;
					
				colorWord |= gfxWord<<colorWordSize;
				colorWordSize += 14;

				BufferedImage display = rawDisplay[bufferPage];
				while( colorWordSize>=4 ) {
					int colorCode = palIndex+(colorWord&0x0f);
					int outColor = pal[colorCode];
					int bleedColor = pal[colorCode+16];
					int scanColor = pal[colorCode+32];
					if( (colorCode&1)!=0 ) {
						display.setRGB(xPos, yPos, outColor);
						display.setRGB(xPos++, yPos+1, scanColor);
					} else {
						display.setRGB(xPos, yPos, bleedColor);
						display.setRGB(xPos++, yPos+1, bleedColor);
					}
					if( (colorCode&2)!=0 ) {
						display.setRGB(xPos, yPos, outColor);
						display.setRGB(xPos++, yPos+1, scanColor);
					} else {
						display.setRGB(xPos, yPos, bleedColor);
						display.setRGB(xPos++, yPos+1, bleedColor);
					}
					if( (colorCode&4)!=0 ) {
						display.setRGB(xPos, yPos, outColor);
						display.setRGB(xPos++, yPos+1, scanColor);
					} else {
						display.setRGB(xPos, yPos, bleedColor);
						display.setRGB(xPos++, yPos+1, bleedColor);
					}
					if( (colorCode&8)!=0 ) {
						display.setRGB(xPos, yPos, outColor);
						display.setRGB(xPos++, yPos+1, scanColor);
					} else {
						display.setRGB(xPos, yPos, bleedColor);
						display.setRGB(xPos++, yPos+1, bleedColor);
					}
					colorWord >>= 4;
					colorWordSize -= 4;
				}

			}
		
		}

	}

	private void flipPage() {
		paintPage = bufferPage;
		canvas.repaint();
		bufferPage = bufferPage==1 ? 0:1;
	}

	private void cleanEdges() {
		BufferedImage display = rawDisplay[bufferPage];
		for( int yb = 0; yb < 24*16; yb++ ) {
			for( int xb = 0; xb < 7; xb++ )
				display.setRGB(xb, yb, 0);
			for( int xb = 80*7; xb < 81*7; xb++ )
				display.setRGB(xb, yb, 0);
		}
	}

	public static int getAddressLo40( int page, int scanline, int offset )
	{
		int address = page<<3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 7;
		address += scanline*40 + offset;
		return address;
	}

	public static int getAddressHi40( int page, int scanline, int offset )
	{
		int address = page<<3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 7;
		address += scanline*40 + offset;
		return address;
	}

	@Override
	public void coldRestart() throws HardwareException {
		lastSwitchIteration = -1;
		rawDisplay = new BufferedImage[2];
		bufferPage = 0;
		paintPage = 1;
		rawDisplay[0] = new BufferedImage(XSIZE+2, YSIZE, BufferedImage.TYPE_INT_RGB);
		rawDisplay[1] = new BufferedImage(XSIZE+2, YSIZE, BufferedImage.TYPE_INT_RGB);
		generatePalette();
		warmRestart();
	}

	@Override
	public void warmRestart() throws HardwareException {
		
	}

	private void generatePalette() {
		
		// Color palette

		pal = new int[48*3];
		Color [] basePal = new Color[4];

		for( int palIndex = 0; palIndex<4; palIndex++ )
			basePal[palIndex] = new Color(Color.HSBtoRGB((((3-palIndex)<<6)+hueShift)/256f, 1f, PAL_BRIGHTNESS/256f));

		for( int palIndex = 1; palIndex<16; palIndex++ ) {

			Color mix = new Color(0);
			int baseIndex = 0;
			int bits = 0;
			for( int bitMask = palIndex; bitMask>0; bitMask >>= 1, baseIndex++ ){
				if( (bitMask&0x01)!=0 ) {
					bits++;
					int red = Math.min((int)(basePal[baseIndex].getRed())+mix.getRed(), 255);
					int green = Math.min((int)(basePal[baseIndex].getGreen())+mix.getGreen(), 255);
					int blue = Math.min((int)(basePal[baseIndex].getBlue())+mix.getBlue(), 255);
					mix = new Color(red, green, blue);
				}
			}

			if( bits==1 ) {
				int red = Math.min(mix.getRed()*2, 255);
				int green = Math.min(mix.getGreen()*2, 255);
				int blue = Math.min(mix.getBlue()*2, 255);
				mix = new Color(red, green, blue);
			}

			pal[palIndex] = mix.getRGB();

		}
		
		// Add monochrome
		pal[PAL_INDEX_MONO] = Color.BLACK.getRGB();
		pal[PAL_INDEX_MONO_GREEN] = Color.BLACK.getRGB();
		for( int index = 1; index<16; index++ ) {
			pal[PAL_INDEX_MONO+index] = Color.WHITE.getRGB();
			pal[PAL_INDEX_MONO_GREEN+index] = Color.GREEN.getRGB();
		}
		
		// Add color bleed palettes
		for( int palSet = 0; palSet<3; palSet++ ) {
			for( int index = 0; index<16; index++ ) {
				// Pixel bleed
				if( palSet*48==PAL_INDEX_COLOR )
					pal[palSet*48+index+16] = new Color(pal[palSet*48+index]).darker().darker().darker().darker().darker().getRGB();
				else
					pal[palSet*48+index+16] = Color.BLACK.getRGB();
				// Blank scanline bleed
				pal[palSet*48+index+32] = new Color(pal[palSet*48+index]).darker().darker().darker().darker().getRGB();
			}
		}

	}

	public int getLastRead() {
		// TODO: sync this when cycle timing implementation is complete
		return lastReadValue;
	}
	
}
