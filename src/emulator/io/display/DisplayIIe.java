package emulator.io.display;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;

import core.exception.HardwareException;
import core.memory.memory8.Memory8;
import core.memory.memory8.MemoryBusIIe;
import emulator.io.display.display8.ScanlineTracer8;
import emulator.io.display.display8.TraceMap8;
import emulator.io.keyboard.KeyboardIIe;

public class DisplayIIe extends DisplayWindow {

	private ScanlineTracer8 tracer;

	private Frame frame;
	private Canvas32x32 canvas;
	private MemoryBusIIe memoryBus;
	private Memory8 memory;

	private int textMod;
	private DisplayType displayType;
	private BufferedImage [] rawDisplay;

	private int xOff = (640-XSIZE)>>1;
	private int yOff = (480-YSIZE)>>1;

	private int bufferPage;
	private int paintPage;
	private int xPaint;
	private int yPaint;
	private int colorWord;
	private int colorWordSize;
	private int shiftBit;
	private int offset40 = 0;

	private int flashToggle = 0;
	private int lastSwitchIteration;

	private int [] pal;
	private int palIndex;
	private int hueShift = -32;

	private static final int PAL_INDEX_COLOR = 0;
	private static final int PAL_INDEX_MONO = 48;
	private static final int PAL_INDEX_MONO_GREEN = 2*48;
	private static final int PAL_BRIGHTNESS = 160;
	private static final int OFFSET40 = 7;

	private static final int XSIZE = 567;
	private static final int YSIZE = 384;
	private static final int SPLIT_DRAW = 320;

	public static final TraceMap8 LO40_TRACE;
	public static final TraceMap8 HI40_TRACE;

	static {

		LO40_TRACE = new TraceMap8(7, 262);
		LO40_TRACE.setPageBit(10);
		LO40_TRACE.addScanlineTrace(0, 103, 8);
		LO40_TRACE.addScanlineTrace(1, 103, 8);
		LO40_TRACE.addScanlineTrace(2, 103, 8);
		LO40_TRACE.addScanlineTrace(3, 103, 8);
		LO40_TRACE.addScanlineTrace(4, 103, 8);
		LO40_TRACE.addScanlineTrace(5, 103, 8);
		LO40_TRACE.addScanlineTrace(6, 103, 8);
		LO40_TRACE.addScanlineTrace(7, 103, 14);
		LO40_TRACE.addScanlineTrace(0, 103, 8);
		LO40_TRACE.addScanlineTrace(1, 103, 8);
		LO40_TRACE.addScanlineTrace(2, 103, 8);
		LO40_TRACE.addScanlineTrace(3, 103, 8);
		LO40_TRACE.addScanlineTrace(4, 103, 8);
		LO40_TRACE.addScanlineTrace(5, 103, 8);
		LO40_TRACE.addScanlineTrace(6, 103, 8);
		LO40_TRACE.addScanlineTrace(7, 103, 8);
		LO40_TRACE.addScanlineTrace(0, 15, 8);
		LO40_TRACE.addScanlineTrace(1, 15, 8);
		LO40_TRACE.addScanlineTrace(2, 15, 8);
		LO40_TRACE.addScanlineTrace(3, 15, 8);
		LO40_TRACE.addScanlineTrace(4, 15, 8);
		LO40_TRACE.addScanlineTrace(5, 15, 8);
		LO40_TRACE.addScanlineTrace(6, 15, 8);
		LO40_TRACE.addScanlineTrace(7, 15, 8);
		LO40_TRACE.addScanlineTrace(0, 55, 8);
		LO40_TRACE.addScanlineTrace(1, 55, 8);
		LO40_TRACE.addScanlineTrace(2, 55, 8);
		LO40_TRACE.addScanlineTrace(3, 55, 8);
		LO40_TRACE.addScanlineTrace(4, 55, 8);
		LO40_TRACE.addScanlineTrace(5, 55, 8);
		LO40_TRACE.addScanlineTrace(6, 55, 8);
		LO40_TRACE.addScanlineTrace(7, 55, 8);

		HI40_TRACE = new TraceMap8(7, 262);
		HI40_TRACE.setPageBit(13);
		HI40_TRACE.addScanlineTrace(0, 103);
		HI40_TRACE.addScanlineTrace(8, 103);
		HI40_TRACE.addScanlineTrace(16, 103);
		HI40_TRACE.addScanlineTrace(24, 103);
		HI40_TRACE.addScanlineTrace(32, 103);
		HI40_TRACE.addScanlineTrace(40, 103);
		HI40_TRACE.addScanlineTrace(48, 103);
		HI40_TRACE.addScanlineTrace(56, 103);
		HI40_TRACE.addScanlineTrace(1, 103);
		HI40_TRACE.addScanlineTrace(9, 103);
		HI40_TRACE.addScanlineTrace(17, 103);
		HI40_TRACE.addScanlineTrace(25, 103);
		HI40_TRACE.addScanlineTrace(33, 103);
		HI40_TRACE.addScanlineTrace(41, 103);
		HI40_TRACE.addScanlineTrace(49, 103);
		HI40_TRACE.addScanlineTrace(57, 103);
		HI40_TRACE.addScanlineTrace(2, 103);
		HI40_TRACE.addScanlineTrace(10, 103);
		HI40_TRACE.addScanlineTrace(18, 103);
		HI40_TRACE.addScanlineTrace(26, 103);
		HI40_TRACE.addScanlineTrace(34, 103);
		HI40_TRACE.addScanlineTrace(42, 103);
		HI40_TRACE.addScanlineTrace(50, 103);
		HI40_TRACE.addScanlineTrace(58, 103);
		HI40_TRACE.addScanlineTrace(3, 103);
		HI40_TRACE.addScanlineTrace(11, 103);
		HI40_TRACE.addScanlineTrace(19, 103);
		HI40_TRACE.addScanlineTrace(27, 103);
		HI40_TRACE.addScanlineTrace(35, 103);
		HI40_TRACE.addScanlineTrace(43, 103);
		HI40_TRACE.addScanlineTrace(51, 103);
		HI40_TRACE.addScanlineTrace(59, 103);
		HI40_TRACE.addScanlineTrace(4, 103);
		HI40_TRACE.addScanlineTrace(12, 103);
		HI40_TRACE.addScanlineTrace(20, 103);
		HI40_TRACE.addScanlineTrace(28, 103);
		HI40_TRACE.addScanlineTrace(36, 103);
		HI40_TRACE.addScanlineTrace(44, 103);
		HI40_TRACE.addScanlineTrace(52, 103);
		HI40_TRACE.addScanlineTrace(60, 103);
		HI40_TRACE.addScanlineTrace(5, 103);
		HI40_TRACE.addScanlineTrace(13, 103);
		HI40_TRACE.addScanlineTrace(21, 103);
		HI40_TRACE.addScanlineTrace(29, 103);
		HI40_TRACE.addScanlineTrace(37, 103);
		HI40_TRACE.addScanlineTrace(45, 103);
		HI40_TRACE.addScanlineTrace(53, 103);
		HI40_TRACE.addScanlineTrace(61, 103);
		HI40_TRACE.addScanlineTrace(6, 103);
		HI40_TRACE.addScanlineTrace(14, 103);
		HI40_TRACE.addScanlineTrace(22, 103);
		HI40_TRACE.addScanlineTrace(30, 103);
		HI40_TRACE.addScanlineTrace(38, 103);
		HI40_TRACE.addScanlineTrace(46, 103);
		HI40_TRACE.addScanlineTrace(54, 103);
		HI40_TRACE.addScanlineTrace(62, 103);
		HI40_TRACE.addScanlineTrace(7, 103);
		HI40_TRACE.addScanlineTrace(15, 103);
		HI40_TRACE.addScanlineTrace(23, 103);
		HI40_TRACE.addScanlineTrace(31, 103);
		HI40_TRACE.addScanlineTrace(39, 103);
		HI40_TRACE.addScanlineTrace(47, 103);
		HI40_TRACE.addScanlineTrace(55, 103);
		HI40_TRACE.addScanlineTrace(63, 103);
		HI40_TRACE.addScanlineTrace(23, 103);
		HI40_TRACE.addScanlineTrace(31, 103);
		HI40_TRACE.addScanlineTrace(39, 103);
		HI40_TRACE.addScanlineTrace(47, 103);
		HI40_TRACE.addScanlineTrace(55, 103);
		HI40_TRACE.addScanlineTrace(63, 103);
		HI40_TRACE.addScanlineTrace(0, 103);
		HI40_TRACE.addScanlineTrace(8, 103);
		HI40_TRACE.addScanlineTrace(16, 103);
		HI40_TRACE.addScanlineTrace(24, 103);
		HI40_TRACE.addScanlineTrace(32, 103);
		HI40_TRACE.addScanlineTrace(40, 103);
		HI40_TRACE.addScanlineTrace(48, 103);
		HI40_TRACE.addScanlineTrace(56, 103);
		HI40_TRACE.addScanlineTrace(1, 103);
		HI40_TRACE.addScanlineTrace(9, 103);
		HI40_TRACE.addScanlineTrace(17, 103);
		HI40_TRACE.addScanlineTrace(25, 103);
		HI40_TRACE.addScanlineTrace(33, 103);
		HI40_TRACE.addScanlineTrace(41, 103);
		HI40_TRACE.addScanlineTrace(49, 103);
		HI40_TRACE.addScanlineTrace(57, 103);
		HI40_TRACE.addScanlineTrace(2, 103);
		HI40_TRACE.addScanlineTrace(10, 103);
		HI40_TRACE.addScanlineTrace(18, 103);
		HI40_TRACE.addScanlineTrace(26, 103);
		HI40_TRACE.addScanlineTrace(34, 103);
		HI40_TRACE.addScanlineTrace(42, 103);
		HI40_TRACE.addScanlineTrace(50, 103);
		HI40_TRACE.addScanlineTrace(58, 103);
		HI40_TRACE.addScanlineTrace(3, 103);
		HI40_TRACE.addScanlineTrace(11, 103);
		HI40_TRACE.addScanlineTrace(19, 103);
		HI40_TRACE.addScanlineTrace(27, 103);
		HI40_TRACE.addScanlineTrace(35, 103);
		HI40_TRACE.addScanlineTrace(43, 103);
		HI40_TRACE.addScanlineTrace(51, 103);
		HI40_TRACE.addScanlineTrace(59, 103);
		HI40_TRACE.addScanlineTrace(4, 103);
		HI40_TRACE.addScanlineTrace(12, 103);
		HI40_TRACE.addScanlineTrace(20, 103);
		HI40_TRACE.addScanlineTrace(28, 103);
		HI40_TRACE.addScanlineTrace(36, 103);
		HI40_TRACE.addScanlineTrace(44, 103);
		HI40_TRACE.addScanlineTrace(52, 103);
		HI40_TRACE.addScanlineTrace(60, 103);
		HI40_TRACE.addScanlineTrace(5, 103);
		HI40_TRACE.addScanlineTrace(13, 103);
		HI40_TRACE.addScanlineTrace(21, 103);
		HI40_TRACE.addScanlineTrace(29, 103);
		HI40_TRACE.addScanlineTrace(37, 103);
		HI40_TRACE.addScanlineTrace(45, 103);
		HI40_TRACE.addScanlineTrace(53, 103);
		HI40_TRACE.addScanlineTrace(61, 103);
		HI40_TRACE.addScanlineTrace(6, 103);
		HI40_TRACE.addScanlineTrace(14, 103);
		HI40_TRACE.addScanlineTrace(22, 103);
		HI40_TRACE.addScanlineTrace(30, 103);
		HI40_TRACE.addScanlineTrace(38, 103);
		HI40_TRACE.addScanlineTrace(46, 103);
		HI40_TRACE.addScanlineTrace(54, 103);
		HI40_TRACE.addScanlineTrace(62, 103);
		HI40_TRACE.addScanlineTrace(7, 103);
		HI40_TRACE.addScanlineTrace(15, 103);
		HI40_TRACE.addScanlineTrace(23, 103);
		HI40_TRACE.addScanlineTrace(31, 103);
		HI40_TRACE.addScanlineTrace(39, 103);
		HI40_TRACE.addScanlineTrace(47, 103);
		HI40_TRACE.addScanlineTrace(55, 103);
		HI40_TRACE.addScanlineTrace(63, 103);
		HI40_TRACE.addScanlineTrace(0, 15);
		HI40_TRACE.addScanlineTrace(8, 15);
		HI40_TRACE.addScanlineTrace(16, 15);
		HI40_TRACE.addScanlineTrace(24, 15);
		HI40_TRACE.addScanlineTrace(32, 15);
		HI40_TRACE.addScanlineTrace(40, 15);
		HI40_TRACE.addScanlineTrace(48, 15);
		HI40_TRACE.addScanlineTrace(56, 15);
		HI40_TRACE.addScanlineTrace(1, 15);
		HI40_TRACE.addScanlineTrace(9, 15);
		HI40_TRACE.addScanlineTrace(17, 15);
		HI40_TRACE.addScanlineTrace(25, 15);
		HI40_TRACE.addScanlineTrace(33, 15);
		HI40_TRACE.addScanlineTrace(41, 15);
		HI40_TRACE.addScanlineTrace(49, 15);
		HI40_TRACE.addScanlineTrace(57, 15);
		HI40_TRACE.addScanlineTrace(2, 15);
		HI40_TRACE.addScanlineTrace(10, 15);
		HI40_TRACE.addScanlineTrace(18, 15);
		HI40_TRACE.addScanlineTrace(26, 15);
		HI40_TRACE.addScanlineTrace(34, 15);
		HI40_TRACE.addScanlineTrace(42, 15);
		HI40_TRACE.addScanlineTrace(50, 15);
		HI40_TRACE.addScanlineTrace(58, 15);
		HI40_TRACE.addScanlineTrace(3, 15);
		HI40_TRACE.addScanlineTrace(11, 15);
		HI40_TRACE.addScanlineTrace(19, 15);
		HI40_TRACE.addScanlineTrace(27, 15);
		HI40_TRACE.addScanlineTrace(35, 15);
		HI40_TRACE.addScanlineTrace(43, 15);
		HI40_TRACE.addScanlineTrace(51, 15);
		HI40_TRACE.addScanlineTrace(59, 15);
		HI40_TRACE.addScanlineTrace(4, 15);
		HI40_TRACE.addScanlineTrace(12, 15);
		HI40_TRACE.addScanlineTrace(20, 15);
		HI40_TRACE.addScanlineTrace(28, 15);
		HI40_TRACE.addScanlineTrace(36, 15);
		HI40_TRACE.addScanlineTrace(44, 15);
		HI40_TRACE.addScanlineTrace(52, 15);
		HI40_TRACE.addScanlineTrace(60, 15);
		HI40_TRACE.addScanlineTrace(5, 15);
		HI40_TRACE.addScanlineTrace(13, 15);
		HI40_TRACE.addScanlineTrace(21, 15);
		HI40_TRACE.addScanlineTrace(29, 15);
		HI40_TRACE.addScanlineTrace(37, 15);
		HI40_TRACE.addScanlineTrace(45, 15);
		HI40_TRACE.addScanlineTrace(53, 15);
		HI40_TRACE.addScanlineTrace(61, 15);
		HI40_TRACE.addScanlineTrace(6, 15);
		HI40_TRACE.addScanlineTrace(14, 15);
		HI40_TRACE.addScanlineTrace(22, 15);
		HI40_TRACE.addScanlineTrace(30, 15);
		HI40_TRACE.addScanlineTrace(38, 15);
		HI40_TRACE.addScanlineTrace(46, 15);
		HI40_TRACE.addScanlineTrace(54, 15);
		HI40_TRACE.addScanlineTrace(62, 15);
		HI40_TRACE.addScanlineTrace(7, 15);
		HI40_TRACE.addScanlineTrace(15, 15);
		HI40_TRACE.addScanlineTrace(23, 15);
		HI40_TRACE.addScanlineTrace(31, 15);
		HI40_TRACE.addScanlineTrace(39, 15);
		HI40_TRACE.addScanlineTrace(47, 15);
		HI40_TRACE.addScanlineTrace(55, 15);
		HI40_TRACE.addScanlineTrace(63, 15);
		HI40_TRACE.addScanlineTrace(0, 55);
		HI40_TRACE.addScanlineTrace(8, 55);
		HI40_TRACE.addScanlineTrace(16, 55);
		HI40_TRACE.addScanlineTrace(24, 55);
		HI40_TRACE.addScanlineTrace(32, 55);
		HI40_TRACE.addScanlineTrace(40, 55);
		HI40_TRACE.addScanlineTrace(48, 55);
		HI40_TRACE.addScanlineTrace(56, 55);
		HI40_TRACE.addScanlineTrace(1, 55);
		HI40_TRACE.addScanlineTrace(9, 55);
		HI40_TRACE.addScanlineTrace(17, 55);
		HI40_TRACE.addScanlineTrace(25, 55);
		HI40_TRACE.addScanlineTrace(33, 55);
		HI40_TRACE.addScanlineTrace(41, 55);
		HI40_TRACE.addScanlineTrace(49, 55);
		HI40_TRACE.addScanlineTrace(57, 55);
		HI40_TRACE.addScanlineTrace(2, 55);
		HI40_TRACE.addScanlineTrace(10, 55);
		HI40_TRACE.addScanlineTrace(18, 55);
		HI40_TRACE.addScanlineTrace(26, 55);
		HI40_TRACE.addScanlineTrace(34, 55);
		HI40_TRACE.addScanlineTrace(42, 55);
		HI40_TRACE.addScanlineTrace(50, 55);
		HI40_TRACE.addScanlineTrace(58, 55);
		HI40_TRACE.addScanlineTrace(3, 55);
		HI40_TRACE.addScanlineTrace(11, 55);
		HI40_TRACE.addScanlineTrace(19, 55);
		HI40_TRACE.addScanlineTrace(27, 55);
		HI40_TRACE.addScanlineTrace(35, 55);
		HI40_TRACE.addScanlineTrace(43, 55);
		HI40_TRACE.addScanlineTrace(51, 55);
		HI40_TRACE.addScanlineTrace(59, 55);
		HI40_TRACE.addScanlineTrace(4, 55);
		HI40_TRACE.addScanlineTrace(12, 55);
		HI40_TRACE.addScanlineTrace(20, 55);
		HI40_TRACE.addScanlineTrace(28, 55);
		HI40_TRACE.addScanlineTrace(36, 55);
		HI40_TRACE.addScanlineTrace(44, 55);
		HI40_TRACE.addScanlineTrace(52, 55);
		HI40_TRACE.addScanlineTrace(60, 55);
		HI40_TRACE.addScanlineTrace(5, 55);
		HI40_TRACE.addScanlineTrace(13, 55);
		HI40_TRACE.addScanlineTrace(21, 55);
		HI40_TRACE.addScanlineTrace(29, 55);
		HI40_TRACE.addScanlineTrace(37, 55);
		HI40_TRACE.addScanlineTrace(45, 55);
		HI40_TRACE.addScanlineTrace(53, 55);
		HI40_TRACE.addScanlineTrace(61, 55);
		HI40_TRACE.addScanlineTrace(6, 55);
		HI40_TRACE.addScanlineTrace(14, 55);
		HI40_TRACE.addScanlineTrace(22, 55);
		HI40_TRACE.addScanlineTrace(30, 55);
		HI40_TRACE.addScanlineTrace(38, 55);
		HI40_TRACE.addScanlineTrace(46, 55);
		HI40_TRACE.addScanlineTrace(54, 55);
		HI40_TRACE.addScanlineTrace(62, 55);
		HI40_TRACE.addScanlineTrace(7, 55);
		HI40_TRACE.addScanlineTrace(15, 55);
		HI40_TRACE.addScanlineTrace(23, 55);
		HI40_TRACE.addScanlineTrace(31, 55);
		HI40_TRACE.addScanlineTrace(39, 55);
		HI40_TRACE.addScanlineTrace(47, 55);
		HI40_TRACE.addScanlineTrace(55, 55);
		HI40_TRACE.addScanlineTrace(63, 55);

	}

	private static final byte[] TEXT_DISPLAY = {

		// Normal text

		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,

		// Flash text

		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,

		// Mouse text

		0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
		0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
		0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
		0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
		0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
		0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
		0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
		0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
		0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
		0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
		0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
		0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
		0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
		0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
		0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
		0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
		0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
		0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
		0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
		0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
		0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
		0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
		0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
		0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
		0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
		0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
		0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
		0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
		0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
		0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
		0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
		0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
		0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
		0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
		0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
		0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
		0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
		0x10, 0x08, 0x36, 0x7f, 0x3f, 0x3f, 0x7e, 0x36,
		0x10, 0x08, 0x36, 0x41, 0x21, 0x21, 0x4a, 0x36,
		0x00, 0x00, 0x02, 0x06, 0x0e, 0x1e, 0x36, 0x42,
		0x7f, 0x22, 0x14, 0x08, 0x08, 0x14, 0x2a, 0x7f,
		0x00, 0x40, 0x20, 0x11, 0x0a, 0x04, 0x04, 0x00,
		0x7f, 0x3f, 0x5f, 0x6c, 0x75, 0x7b, 0x7b, 0x7f,
		0x70, 0x60, 0x7e, 0x31, 0x79, 0x30, 0x3f, 0x02,
		0x00, 0x18, 0x07, 0x00, 0x07, 0x0c, 0x08, 0x70,
		0x08, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a,
		0x08, 0x08, 0x08, 0x08, 0x49, 0x2a, 0x1c, 0x08,
		0x08, 0x1c, 0x2a, 0x49, 0x08, 0x08, 0x08, 0x08,
		0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x40, 0x40, 0x44, 0x46, 0x7f, 0x06, 0x04,
		0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
		0x13, 0x18, 0x1c, 0x7e, 0x1c, 0x18, 0x10, 0x6f,
		0x64, 0x0c, 0x1c, 0x3f, 0x1c, 0x0c, 0x04, 0x7b,
		0x40, 0x48, 0x08, 0x7f, 0x3e, 0x1c, 0x48, 0x40,
		0x40, 0x48, 0x1c, 0x3e, 0x7f, 0x08, 0x48, 0x40,
		0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f,
		0x08, 0x10, 0x20, 0x7f, 0x20, 0x10, 0x08, 0x00,
		0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55,
		0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a,
		0x00, 0x3e, 0x41, 0x01, 0x01, 0x01, 0x7f, 0x00,
		0x00, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x7f, 0x00,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x08, 0x1c, 0x3e, 0x7f, 0x3e, 0x1c, 0x08, 0x00,
		0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x14, 0x14, 0x77, 0x00, 0x77, 0x14, 0x14, 0x00,
		0x7f, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x7f,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x7b, 0x77, 0x6f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x7f, 0x63, 0x5f, 0x43, 0x5d, 0x43, 0x7f,
		0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
		0x7f, 0x7f, 0x43, 0x7d, 0x7d, 0x7d, 0x43, 0x7f,
		0x5f, 0x5f, 0x43, 0x5d, 0x5d, 0x5d, 0x43, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x41, 0x7d, 0x43, 0x7f,
		0x67, 0x5b, 0x7b, 0x61, 0x7b, 0x7b, 0x7b, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
		0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
		0x77, 0x7f, 0x73, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x6f, 0x7f, 0x67, 0x6f, 0x6f, 0x6f, 0x6d, 0x73,
		0x7d, 0x7d, 0x5d, 0x6d, 0x71, 0x6d, 0x5d, 0x7f,
		0x73, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
		0x7f, 0x7f, 0x49, 0x55, 0x55, 0x55, 0x5d, 0x7f,
		0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
		0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
		0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d,
		0x7f, 0x7f, 0x43, 0x5d, 0x5d, 0x43, 0x5f, 0x5f,
		0x7f, 0x7f, 0x45, 0x79, 0x7d, 0x7d, 0x7d, 0x7f,
		0x7f, 0x7f, 0x43, 0x7d, 0x63, 0x5f, 0x61, 0x7f,
		0x7f, 0x7b, 0x61, 0x7b, 0x7b, 0x5b, 0x67, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x4d, 0x53, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x7f,
		0x7f, 0x7f, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x7f,
		0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
		0x7f, 0x7f, 0x41, 0x6f, 0x77, 0x7b, 0x41, 0x7f,
		0x47, 0x73, 0x73, 0x79, 0x73, 0x73, 0x47, 0x7f,
		0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
		0x71, 0x67, 0x67, 0x4f, 0x67, 0x67, 0x71, 0x7f,
		0x53, 0x65, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
		0x7f, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x7f, 0x7f,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
		0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
		0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
		0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
		0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
		0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
		0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
		0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
		0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
		0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
		0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
		0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
		0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
		0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
		0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
		0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
		0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
		0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
		0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
		0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
		0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
		0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
		0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
		0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
		0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
		0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
		0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
		0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
		0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
		0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
		0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
		0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
		0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
		0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
		0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
		0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
		0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
		0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
		0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
		0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
		0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
		0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
		0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
		0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
		0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
		0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
		0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
		0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
		0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00

	};

	private static final int HGR_TO_DHGR[] = new int[] {
		0x0000,	0x0003,	0x000c,	0x000f,	0x0030,	0x0033,	0x003c,	0x003f,
		0x00c0,	0x00c3,	0x00cc,	0x00cf,	0x00f0,	0x00f3,	0x00fc,	0x00ff,
		0x0300,	0x0303,	0x030c,	0x030f,	0x0330,	0x0333,	0x033c,	0x033f,
		0x03c0,	0x03c3,	0x03cc,	0x03cf,	0x03f0,	0x03f3,	0x03fc,	0x03ff,
		0x0c00,	0x0c03,	0x0c0c,	0x0c0f,	0x0c30,	0x0c33,	0x0c3c,	0x0c3f,
		0x0cc0,	0x0cc3,	0x0ccc,	0x0ccf,	0x0cf0,	0x0cf3,	0x0cfc,	0x0cff,
		0x0f00,	0x0f03,	0x0f0c,	0x0f0f,	0x0f30,	0x0f33,	0x0f3c,	0x0f3f,
		0x0fc0,	0x0fc3,	0x0fcc,	0x0fcf,	0x0ff0,	0x0ff3,	0x0ffc,	0x0fff,
		0x3000,	0x3003,	0x300c,	0x300f,	0x3030,	0x3033,	0x303c,	0x303f,
		0x30c0,	0x30c3,	0x30cc,	0x30cf,	0x30f0,	0x30f3,	0x30fc,	0x30ff,
		0x3300,	0x3303,	0x330c,	0x330f,	0x3330,	0x3333,	0x333c,	0x333f,
		0x33c0,	0x33c3,	0x33cc,	0x33cf,	0x33f0,	0x33f3,	0x33fc,	0x33ff,
		0x3c00,	0x3c03,	0x3c0c,	0x3c0f,	0x3c30,	0x3c33,	0x3c3c,	0x3c3f,
		0x3cc0,	0x3cc3,	0x3ccc,	0x3ccf,	0x3cf0,	0x3cf3,	0x3cfc,	0x3cff,
		0x3f00,	0x3f03,	0x3f0c,	0x3f0f,	0x3f30,	0x3f33,	0x3f3c,	0x3f3f,
		0x3fc0,	0x3fc3,	0x3fcc,	0x3fcf,	0x3ff0,	0x3ff3,	0x3ffc,	0x3fff
	};

	private static final int GR_TO_DHGR[] = new int[] {
		0x0000, 0x0000,
		0x1111, 0x0444,
		0x2222, 0x0888,
		0x3333, 0x0ccc,
		0x0444, 0x1111,
		0x1555, 0x1555,
		0x2666, 0x1999,
		0x3777, 0x1ddd,
		0x0888, 0x2222,
		0x1999, 0x2666,
		0x2aaa, 0x2aaa,
		0x3bbb, 0x2eee,
		0x0ccc, 0x3333,
		0x1ddd, 0x3777,
		0x2eee, 0x3bbb,
		0x3fff, 0x3fff
	};

	private enum DisplayType {
		TEXT40,
		TEXT80,
		LORES40,
		LORES40M,
		LORES80,
		HIRES40,
		HIRES40M,
		HIRES80
	}

	public DisplayIIe(MemoryBusIIe memoryBus, KeyboardIIe keyboard, long unitsPerCycle) throws HardwareException {
		super(unitsPerCycle);
		tracer = new ScanlineTracer8();
		tracer.setScanStart(25, 70);
		tracer.setScanSize(65, 262);
		this.memoryBus = memoryBus;
		this.memory = memoryBus.getMemory();
		coldRestart();
		canvas = new Canvas32x32();
		frame = new Frame("Ever2E");
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent windowEvent){
				System.exit(0);
			}
		});
		frame.add(canvas);
		canvas.setBackground(Color.BLACK);
		frame.setVisible(true);
		frame.setSize(XSIZE+(xOff<<1), YSIZE+(yOff<<1)+frame.getInsets().top);
		frame.addKeyListener(keyboard);
		frame.setFocusTraversalKeysEnabled(false);
		canvas.repaint();
		canvas.addKeyListener(keyboard);
		canvas.setFocusTraversalKeysEnabled(false);
	}

	private class Canvas32x32 extends Canvas {

		private static final long serialVersionUID = 3277512952021171260L;

		public Canvas32x32() {
			super();
			setSize(XSIZE, YSIZE);
			evaluateSwitchChange();
		}

		public void paint( Graphics g ) {
			Dimension size = getSize();
			xOff = (size.width-XSIZE)>>1;
			yOff = (size.height-YSIZE)>>1;
			g.drawImage(rawDisplay[paintPage], xOff, yOff, this);
		}

	}

	private void evaluateSwitchChange() {

		// Visible page is set by PAGE2 flag if 80STORE is off - Sather 8-19
		tracer.setPage(memoryBus.isPage2()&&!memoryBus.is80Store() ? 2:1);

		// Character setting for text modes
		if( memoryBus.isAltCharSet() )
			textMod = 2;
		else
			textMod = (flashToggle&0x10)!=0 ? 1:0;

		// HIRES40M / LORES40M - Sather 8-22
		// Sather does not fully indicate whether TEXT40 bytes always ignore bit 8 despite the status of AN3
		// This could only be tested by changing Apple IIe character firmware, but it is possible that alternate,
		//   hi-bit-set character sets would be shifted (red-blue) if AN3 was reset
		// If AN3 does effect text shifting, this feature would be disabled by modes such as double-hi-res,
		//   which reset the AN3 switch
		DisplayType displayTypeTop;
		DisplayType displayTypeBottom;

		if( memoryBus.isText() )
			displayTypeTop = memoryBus.is80Col() ? DisplayType.TEXT80:DisplayType.TEXT40;
		else {
			if( memoryBus.isHiRes() )
				displayTypeTop = ( memoryBus.is80Col() && !memoryBus.isAn3() ) ?
						DisplayType.HIRES80 : ( memoryBus.isAn3() ? DisplayType.HIRES40:DisplayType.HIRES40M );
			else
				displayTypeTop = ( memoryBus.is80Col() && !memoryBus.isAn3() ) ?
						DisplayType.LORES80 : ( memoryBus.isAn3() ? DisplayType.LORES40:DisplayType.LORES40M );
		}

		// Set bottom panel display
		if( memoryBus.isMixed() )
			displayTypeBottom = memoryBus.is80Col() ? DisplayType.TEXT80:DisplayType.TEXT40;
		else
			displayTypeBottom = displayTypeTop;

		// Turn color burst cycle off if in text-only mode
		if( displayTypeTop==DisplayType.TEXT40 || displayTypeTop==DisplayType.TEXT80 )
			palIndex = PAL_INDEX_MONO;
		else
			palIndex = PAL_INDEX_COLOR;

		// Set display mode for the given scanline
		displayType = yPaint<SPLIT_DRAW ? displayTypeTop:displayTypeBottom;

		// Adjust the 40/80 7-bit offset
		if( displayType==DisplayType.HIRES80 || displayType==DisplayType.LORES80 ||
				displayType==DisplayType.TEXT80 ) {
			colorWordSize -= offset40;
			offset40 = 0;
		}
		else {
			colorWordSize += OFFSET40 - offset40;
			offset40 = OFFSET40;
		}

		// Set the addressing mode
		if( displayType==DisplayType.HIRES40 || displayType==DisplayType.HIRES40M ||
				displayType==DisplayType.HIRES80 )
			tracer.setTraceMap(DisplayIIe.HI40_TRACE);
		else
			tracer.setTraceMap(DisplayIIe.LO40_TRACE);

	}

	@Override
	public void cycle() throws HardwareException {

		incSleepCycles(1);

		if( !tracer.isBlank() ) {
			tracer.cycle();
			if( tracer.isHbl() ) {
				xPaint = 0;
				colorWord = 0;
				colorWordSize = offset40;
				shiftBit = 0;
				yPaint += 2;
				if( yPaint==SPLIT_DRAW )
					lastSwitchIteration--;
				else if( yPaint==YSIZE ) {
					yPaint = 0;
					lastSwitchIteration--;
					flipPage();
					cleanEdges();
				}
				if( tracer.isVbl() ) {
					flashToggle++;
					if( textMod<2 )
						textMod = (flashToggle&0x10)!=0 ? 1:0;
				}
				return;
			}
		} else {
			tracer.cycle();
			if( tracer.isBlank() )
				return;
		}

		int switchIteration = memoryBus.getSwitchIteration();
		if( lastSwitchIteration!=switchIteration ) {
			lastSwitchIteration = switchIteration;
			evaluateSwitchChange();
		}

		int gfxWord = 0;
		int readValue = 0;
		int readValueExt = 0;
		int readAddress = tracer.getAddress();

		switch( displayType ) {

		case HIRES40:
			readValue = memory.getByte(readAddress);
			gfxWord = HGR_TO_DHGR[readValue&0x7f];
			if( (readValue&0x80)!=0 ) {
				gfxWord <<= 1;
				gfxWord |= shiftBit;
			}
			shiftBit = (gfxWord&0x2000)!=0 ? 1:0;
			break;

		case HIRES40M:
			readValue = memory.getByte(readAddress);
			gfxWord = HGR_TO_DHGR[readValue&0x7f];
			break;

		case HIRES80:
			readValue = memory.getByte(0x10000|readAddress);
			gfxWord = readValue;
			readValue = memory.getByte(readAddress);
			gfxWord |= readValue<<7;
			break;

		case LORES40:
			readValue = memory.getByte(readAddress);
			readValue =  (yPaint&0x08)!=0 ? readValue>>4 : readValue&0x0f;
			gfxWord = GR_TO_DHGR[(readValue<<1)+((tracer.getHScan()&0x01)!=0?0:1)];
			break;

		case LORES40M:
			readValue = memory.getByte(readAddress);
			readValue = (yPaint&0x08)!=0 ? readValue>>4 : readValue&0x0f;
			gfxWord = HGR_TO_DHGR[0x7f&GR_TO_DHGR[(readValue<<1)+((tracer.getHScan()&0x01)!=0?0:1)]];
			break;

		case LORES80:
			if( (yPaint&0x08)!=0 ) {
				readValue = memory.getByte(0x10000|readAddress)>>4;
				readValueExt = memory.getByte(readAddress)>>4;
			} else {
				readValue = memory.getByte(0x10000|readAddress)&0x0f;
				readValueExt = memory.getByte(readAddress)&0x0f;
			}
			gfxWord = 0x7f & GR_TO_DHGR[((tracer.getHScan()&0x01)!=0?0:1)+(readValue<<1)];
			gfxWord |= ( 0x7f & GR_TO_DHGR[((tracer.getHScan()&0x01)!=0?0:1)+(readValueExt<<1)] ) << 7;
			break;

		case TEXT40:
			readValue = memory.getByte(readAddress);
			gfxWord = HGR_TO_DHGR[TEXT_DISPLAY[(textMod<<11)+(readValue*8+((yPaint&0x0e)>>1))]];
			break;

		case TEXT80:
			readValue = memory.getByte(0x10000|readAddress);
			gfxWord = TEXT_DISPLAY[(textMod<<11)+(readValue*8+((yPaint&0x0e)>>1))];
			readValue = memory.getByte(readAddress);
			gfxWord |= TEXT_DISPLAY[(textMod<<11)+(readValue*8+((yPaint&0x0e)>>1))]<<7;
			break;

		}

		colorWord |= gfxWord<<colorWordSize;
		colorWordSize += 14;

		BufferedImage display = rawDisplay[bufferPage];
		while( colorWordSize>=4 ) {
			int colorCode = palIndex+(colorWord&0x0f);
			int outColor = pal[colorCode];
			int bleedColor = pal[colorCode+16];
			int scanColor = pal[colorCode+32];
			if( (colorCode&1)!=0 ) {
				display.setRGB(xPaint, yPaint, outColor);
				display.setRGB(xPaint++, yPaint+1, scanColor);
			} else {
				display.setRGB(xPaint, yPaint, bleedColor);
				display.setRGB(xPaint++, yPaint+1, bleedColor);
			}
			if( (colorCode&2)!=0 ) {
				display.setRGB(xPaint, yPaint, outColor);
				display.setRGB(xPaint++, yPaint+1, scanColor);
			} else {
				display.setRGB(xPaint, yPaint, bleedColor);
				display.setRGB(xPaint++, yPaint+1, bleedColor);
			}
			if( (colorCode&4)!=0 ) {
				display.setRGB(xPaint, yPaint, outColor);
				display.setRGB(xPaint++, yPaint+1, scanColor);
			} else {
				display.setRGB(xPaint, yPaint, bleedColor);
				display.setRGB(xPaint++, yPaint+1, bleedColor);
			}
			if( (colorCode&8)!=0 ) {
				display.setRGB(xPaint, yPaint, outColor);
				display.setRGB(xPaint++, yPaint+1, scanColor);
			} else {
				display.setRGB(xPaint, yPaint, bleedColor);
				display.setRGB(xPaint++, yPaint+1, bleedColor);
			}
			colorWord >>= 4;
			colorWordSize -= 4;
		}

	}

	private void flipPage() {
		paintPage = bufferPage;
		canvas.repaint();
		bufferPage = bufferPage==1 ? 0:1;
	}

	private void cleanEdges() {
		BufferedImage display = rawDisplay[bufferPage];
		for( int yb = 0; yb < 24*16; yb++ ) {
			for( int xb = 0; xb < 7; xb++ )
				display.setRGB(xb, yb, 0);
			for( int xb = 80*7; xb < 81*7; xb++ )
				display.setRGB(xb, yb, 0);
		}
	}

	public static int getAddressLo40( int page, int scanline, int offset )
	{
		int address = page<<3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 7;
		address += scanline*40 + offset;
		return address;
	}

	public static int getAddressHi40( int page, int scanline, int offset )
	{
		int address = page<<3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 3;
		address |= scanline&0x0007;
		scanline >>= 3;
		address <<= 7;
		address += scanline*40 + offset;
		return address;
	}

	@Override
	public void coldRestart() throws HardwareException {
		tracer.coldRestart();
		lastSwitchIteration = -1;
		rawDisplay = new BufferedImage[2];
		bufferPage = 0;
		paintPage = 1;
		yPaint = YSIZE-2;
		rawDisplay[0] = new BufferedImage(XSIZE+2, YSIZE, BufferedImage.TYPE_INT_RGB);
		rawDisplay[1] = new BufferedImage(XSIZE+2, YSIZE, BufferedImage.TYPE_INT_RGB);
		generatePalette();
	}

	private void generatePalette() {

		// Add main color palette
		pal = new int[48*3];
		Color [] basePal = new Color[4];

		for( int palIndex = 0; palIndex<4; palIndex++ )
			basePal[palIndex] = new Color(Color.HSBtoRGB((((3-palIndex)<<6)+hueShift)/256f, 1f, PAL_BRIGHTNESS/256f));

		for( int palIndex = 1; palIndex<16; palIndex++ ) {

			Color mix = new Color(0);
			int baseIndex = 0;
			int bits = 0;
			for( int bitMask = palIndex; bitMask>0; bitMask >>= 1, baseIndex++ ){
				if( (bitMask&0x01)!=0 ) {
					bits++;
					int red = Math.min((int)(basePal[baseIndex].getRed())+mix.getRed(), 255);
					int green = Math.min((int)(basePal[baseIndex].getGreen())+mix.getGreen(), 255);
					int blue = Math.min((int)(basePal[baseIndex].getBlue())+mix.getBlue(), 255);
					mix = new Color(red, green, blue);
				}
			}

			if( bits==1 ) {
				int red = Math.min(mix.getRed()*2, 255);
				int green = Math.min(mix.getGreen()*2, 255);
				int blue = Math.min(mix.getBlue()*2, 255);
				mix = new Color(red, green, blue);
			}

			pal[palIndex] = mix.getRGB();

		}

		// Add monochrome
		pal[PAL_INDEX_MONO] = Color.BLACK.getRGB();
		pal[PAL_INDEX_MONO_GREEN] = Color.BLACK.getRGB();
		for( int index = 1; index<16; index++ ) {
			pal[PAL_INDEX_MONO+index] = Color.WHITE.getRGB();
			pal[PAL_INDEX_MONO_GREEN+index] = Color.GREEN.getRGB();
		}

		// Add color bleed palettes
		for( int palSet = 0; palSet<3; palSet++ ) {
			for( int index = 0; index<16; index++ ) {
				// Pixel bleed
				if( palSet*48==PAL_INDEX_COLOR )
					pal[palSet*48+index+16] = new Color(pal[palSet*48+index]).darker().darker().darker().darker().darker().getRGB();
				else
					pal[palSet*48+index+16] = Color.BLACK.getRGB();
				// Blank scanline bleed
				pal[palSet*48+index+32] = new Color(pal[palSet*48+index]).darker().darker().darker().darker().getRGB();
			}
		}

	}

	public int getLastRead() {
		return memory.getByte(tracer.getAddress());
	}

	public boolean isVbl() {
		return tracer.isVbl();
	}

}
